* 2015년 1월 15일 목요일. FitProj 프로젝트 생성

(*메모*)
안드로이드 스튜디오에 아직 적응이 덜 되었고, 구글핏도 상당히 낯설다.
일단 필요한 주요 기능에 대한 모듈을 만들고, TestActivity에서 버튼을 누르면 해당 기능이 동작하고 적당한 결과가 로그로 찍히도록 개발하자.

(완료-0118) 1. History API 사용하여 데이터 불러오기 테스트
=> 1일 단위로 걷기 수
=> 일주일 단위로 걷기 수
=> 한달 단위로 걷기 수
=> 거리는 차량을 이용한 거리까지 포함되기 때문에 세션을 이용해서 풀어야 할듯

(완료-0118) 2. Recording API 사용하여 걷기 데이터 저장
=> subscribe와 unsubscribe 토글버튼 추가

* 1월 18일

(완료-0118) 3. Sensor API 사용하여 실시간으로 걷기 수 보여주기
=> register와 unregister 토글버튼 추가

* 1월 24일

(완료-0125) 4. 원형 그래프뷰 만들기
=> 인터페이스 만들기
=> drawArc할때 색상에 그라데이션 적용하고, 중앙에 마스크 씌우기
=> 그래프 시작지점과 종료지점에 해당 색상의 원 그리기
=> 2개 이상의 그래프를 뷰 안에 표현하기

* 1월 25일

(완료-0125) 5. 프레그먼트 기반의 MainActivity 만들기
=> 액티비티 하나짜리 앱으로 가자.
=> ViewPager 사용

(완료-0126) 6. FitDao 만들기

(완료-0201) 7. HorizontalGraphView 만들기
=> 일간 운동량 보여주기

* 1월 30일

(보류-0130) 8. 대시보드에 보여줄 데이터 가져오기
=> 목표는 정해져있다고 가정하고 데이터들을 가져와보자.
=> 걷기: 목표는 3km, 오늘하루 걸은 거리. 일단 스텝수에 보폭을 곱해서 구하자.
=> 달리기: 목표는 2km, 오늘하루 달린 거리.
=> 싸이클: 목표는 4km, 오늘하루 자전거 탄 거리.
=> 걷기 이외의 데이터를 얻기가 어렵다. 시간이 없으니 일단 걷기 기능만 고려해서 앱을 만들자.

* 1월 31일

(완료-0131) 9. 목표추가 및 목표목록 보여주기

(완료-0131) 10. 목표 수정하기

(완료-0201) 11. 대시보드에서 목표 눌렀을때 상세화면
o=> 상단 및 중단
o=> 하단의 히스토리 영역

* 2월 1일

(완료-0206) 12. 대시보드에 실제 데이터 적용하기
=> 걷기: 일단은 (보수*0.0008)로 거리계산하고, 추후 개선하자.
=> 달리기: bucket을 1시간으로 잡고 데이터를 가져온후 보수가 일정량 이상이면 1분 단위로 다시 요청하여 달리기 데이터 추출
=> 싸이클: 싸이클 데이터 요청. 직접입력 필요할까? 고민중.
=> FitDao의 amount를 INTEGER에서 NUMERIC으로 변경

* 2월 5일

(*NOTE*) 걷기, 달리기, 자전거 데이터 산출 방식
=> 걷기: 분당 50~120미터 & step 데이터가 있는 경우
=> 달리기: 분당 120~400미터 & step 데이터가 있는 경우
=> 자전거: 분당 400~650미터 & 마지막 bucket이 분당 650미터를 넘어가면 안된다.
=> 차: 분당 800미터 이상인 bucket이 있는 경우 (분당 400미터 이내 & step 데이터가 있는 경우)가 될때까지 차 타고 있었던 것으로 간주한다.
=> 로직 변경
=> 크기 1440짜리, 분당 스텝수, 분당 이동거리 배열을 만들고, 그 배열을 기반으로 데이터를 만든다.

* 2월 6일

(완료-0207) 13. 각 목표별 상세화면
=> 어느정도 화면에 내용출력하는 정도까지만 완료

* 2월 7일

(완료) 15. 기획 확인
=> 달리기 목표를 생성하지 않고 걷기 목표만 있을때 달리기한 거리를 걷기한 거리에 더해야 할까?
   만약 그렇게 한다면, 히스토리를 보여줄때 중간에 달리기 목표가 추가되었다면 걷기한 거리가 갑자기 확 줄어들텐데?
   => 안한다로 정리됨.
=> 알람 왔을때 노티바 영역 메시지

(*NOTE*) 목표상세화면의 목표 히스토리 정보 보여주는 방식
=> 목표생성일 이후 현재까지의 날짜들의 수만큼 크기를 갖는 배열을 만든다.
=> 리스트를 화면에 출력한다.
=> 보이는 것 중 첫번째 항목에 대하여 데이터를 가져온다.
=> 끝나면 다음으로 데이터 가져올 항목을 그때그때 찾는다.

* 2월 8일

(완료-0209) 16. 체중정보 저장하기 및 가져오기

(완료-0212) 17. 오후 5시에 목표 미달성시 알람
=> 문구 정해서 수정해야한다.
=> 목표 가져와서 확인하는 로직 추가해야한다.

(완료-0212) 18. 목표 항목에 작은 그래프 넣기

(완료-0209) 19. strings.xml 만들기

* 2월 12일

(보류-0212) 20. record api 등록 관련하여 Data 탭에 스위치 추가
=> 구글 Fitness앱의 설정에 있는 Activity detection의 on/off 여부를 어떻게 알 수 있을까?

(보류-0215) 21. 목표상세화면에서 TODAY ACTIVITY의 위치
=> 말풍선 받으면 개발하자.

(완료-0215) 22. 애니메이션 적용
o=> 대시보드에서 각 목표 클릭했을때, 목표색이 전체를 덮었다가 상단으로 수렴하는 방식
o=> 반대로 목표상세에서 대시보드로 돌아올때 전체를 덮었다가 항목위치로 수렴하는 방식
o=> 목표상세에서 하단 히스토리 영역 페이드인으로 나타나면서 각 항목은 물채워지는 애니메이션
o=> 목표탭에서 추가버튼 눌었을때, 버튼에서 퍼져나가는 애니메이션
o=> 반대로 목표추가화면에서 돌아올때는, 버튼으로 모이는 애니메이션

(완료-0216) 14. 걷기와 달리기 거리 산출시 로직 수정
=> 차타고 이동한 거리가 자꾸 포함된다.
=> 스텝수가 있었던 시간대와 차타고 이동한 거리가 있었던 시간대가 약간이라도 겹치면 문제가 생긴다.

* 2월 12일 (오픈하자!)

(완료-0216) 23. 디자인 적용
o=> 각 운동별 아이콘 넣기
o=> 앱 아이콘 적용
o=> 목표 추가 버튼 적용
o=> 목표추가화면의 요일 체크박스 => Weekdays, S M T W T F S, 체크박스

(완료-0216) 24. MainDataFragment의 그래프 하단의 날짜 아래에 몸무게정보 추가

(완료-0216) 25. MainDashboardFragment에서 목표가 없을때 화면
o=> 우측하단에 목표추가 버튼
o=> 화면 중앙에 메시지. 목표를 추가하세요.
o=> 목표추가후 돌아올때 화면갱신하기 => 액티비티에 리스너 추가하는 방식

(완료-0216) 26. MainGoalsFragment에서 목표가 없을때 화면
=> 화면 중앙에 메시지. 목표를 추가하세요.

(완료-0216) 27. MainDataFragment에서 몸무게가 없을때 화면

(완료-0216) 28. MainDashboardFragment는 화면 보여질때마다 리로드하기
=> 위의 25번 세번째 이슈 해결로 같이 해결됨

(완료-0217) 29. 문구 수정
=> 문구들 전반적으로 확인
=> 노티 문구 수정

(완료-0217) 30. 플레이스토어에 등록
=> 앱설명
=> 스크린샷

(완료-0217) 31. 구글핏챌린지에 제출

* 2월 19일

(완료-0221) 32. GoalDetailFragment의 히스토리 오늘날짜 오류 수정
=> 테스트 필요

(완료-0225) 33. 히스토리에 말풍선 추가
=> 말풍선에는, 첫째줄 TODAY 또는 날짜, 둘째줄 0.00km
=> 기본은 오늘날짜에 나오고, 다른 날짜를 터치하면 거기로 말풍선 이동
=> 말풍선 대신에 토스트형식으로

(완료-0221) 34. 한글 strings.xml 추가
=> 테스트 필요

(완료-0225) 35. 대시보드 메시지, 좋은아침의 시간대 설정 아침 5시부터로 수정
=> 테스트 필요

* 3월 17일

(완료-0320) 36. 구글플레이의 가이드라인에 맞추기
o=> 데이터 탭에 연결해제 버튼 추가하기 => 연결해제 누르면 앱종료
o=> 앱실행시 연결되어있지 않다면 다이얼로그 띄우기 => 구글핏아이콘, 설명문구, 연결버튼

* 3월 20일

(완료-0320) 37. 오류수정 및 일부수정
o=> 대시보드에 로딩표시하기
o=> 데이터탭에 저장버튼 무조건 나오는 문제
o=> 버튼에 ripple 효과 넣기
o=> 목표 history에서 오늘날짜 안나오는 문제
o=> 구글핏 연결할때 오류

* 3월 31일

(완료) 38. 오류수정 및 일부개선
o=> screenOrientation=portrait로 수정
o=> 몸무게 수정시 글자바뀔때마다 저장버튼이 애니메이션 되는 문제
x=> 몸무게 목록 가져올때 항목이 일부 누락되는 듯 하다. => api의 버그인듯
o=> 데이터탭에서 몸무게 많을때 스크롤 안되는 문제

* 4월 1일

(완료-0419) 39. 대시보드 상세화면 개선
o=> 히스토리는 최소 7개이상 나오기
o=> 중앙 그래프를 중앙 정렬
o=> 중앙 그래프를 ViewPager로 적용
x=> 그래프 상단에 날짜와 요일 (04.01 / 수요일)
o=> 그래프 안쪽의 지금까지 운동량 텍스트 색상을 테마색상으로 변경
o=> 히스토리에서 오늘날짜는 오늘(Today)로 변경
o=> 항목 우측의 그래프 중앙에 퍼센트 보여주기

(보류-0419) 40. 운동량이 없는 경우
=> 데이터 화면에 "구글핏 설정", "활동 감지 기능을 활성화하세요."
=> 이슈 발생하면 처리하자.

(완료-0401) 41. 횡리스트뷰 사용하는 부분들에서 최신항목을 오른쪽으로 변경하기
x=> 대시보드상세의 히스토리
x=> 데이터탭의 몸무게 히스토리
o=> HorizontalListView가 원하는대로 동작하지 않기 때문에 그냥 몸무게히스토리를 좌측최신으로 정렬

* 4월 17일

(완료-0419) 42. km, kg 단위를 변경할 수 있도록 하자.
=> 거리는 km, mile 선택가능. 기본값은 km
=> 몸무게는 kg, lbs(파운드) 선택가능. 기본값은 kg
=> Data 섹션에 추가하자.

* 2018년 1월 9일 화요일

(*NOTE*) GoogleFit sample을 정상적으로 실행시키고, Walkholic을 어떻게 수정할지 결정하자.
=> 벌써 3년이 지났다. 그간 잊고 살다가 실행이 안된다는 피드백을 받고 확인을 해보니, API 자체가 바뀌면서 하위호환을 해주지 않는 상황이 된 듯 하다.
=> 뭔가 많이 바뀌어서 한참 헤매다가 이제야 살짝 감을 잡았다. 그리고 본 로그 파일의 존재도 잊고 있다가 이제야 알게 되었다.
=> GoogleFit을 쓰려면 GoogleSignIn을 써야 하고, 그러려면 google-services.json 파일과 client id가 필요하다.
=> 본 로그파일을 읽어보고, 현재 sample 프로젝트들을 어떻게 이용하여 프로젝트를 수정할지 결정하자.

* 1월 10일

(완료) 43. Test2Activity를 만들자.
o=> google signin을 위해 google-services.json을 app 디렉토리에 추가하자.
o=> 기존 TestActivity와 History sample, Recording sample을 참고하여 Test2Activity를 만들자.
   => SampleHistoryActivity와 SampleRecordingActivity를 추가했다. => 깃헙에 올리기 전에는 삭제하자.

* 1월 28일

(완료-0203) 44. 구식 코드를 모두 변경하자.
=> 코드 정리는 대강 끝냄.

* 2월 3일

(완료-0207) 45. 갤스8에는 Google Fitness가 기본설치 되어 있지 않아서, recording api를 직접 사용해야 한다.
=> 데이터 탭에서 레코딩 여부 스위치를 추가하자.

* 2월 7일

(완료-0208) 46. 앱 빌드해서 업데이트 하자.
=> keystore가 없어서 한참 헤매다가 간신히 찾았지만, 비번을 잊어버려서 또 멘붕이 왔다가, 이 또한 극복했다.
  => Project경로\.gradle\2.4\taskArtifacts\taskArtifacts.bin 여기에 비번이 적혀있고, 비번의 일부를 기억하고 있다면 검색해서 찾을 수 있다.
=> 그런데 또 다른 문제 등장. release용 앱이 실행되지 않는다..
  => 구글 개발자 콘솔에서 oauth client 생성하고, 프로젝트내의 google-services.json 에서 해당 값 변경하여 해결함.

47. 깃헙을 어떻게 관리할지 계획을 세우고, 코드를 올리자.